import json
import logging
import asyncio
from datetime import datetime
import paho.mqtt.client as mqtt
from fastapi import FastAPI, WebSocket
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
import os
import threading
import psutil
import time
from pydantic import BaseModel

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
garage_state = {
    "temperature": 20.0,
    "humidity": 45.0,
    "door_open": False,
    "motion_detected": False,
    "light_on": False,
    "light_brightness": 0,
    "last_update": None,
    "system_info": {
        "cpu_percent": 0,
        "memory_percent": 0,
        "disk_usage": 0,
        "uptime": 0
    }
}

connected_clients = []
mqtt_loop = asyncio.new_event_loop()
mqtt_client = mqtt.Client()

class BrightnessRequest(BaseModel):
    brightness: int

def get_system_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    try:
        return {
            "cpu_percent": psutil.cpu_percent(),
            "memory_percent": psutil.virtual_memory().percent,
            "disk_usage": psutil.disk_usage('/').percent,
            "uptime": int(time.time() - psutil.boot_time())
        }
    except:
        return {
            "cpu_percent": 0,
            "memory_percent": 0,
            "disk_usage": 0,
            "uptime": 0
        }

def run_async_in_mqtt_thread(coro):
    """–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ MQTT –ø–æ—Ç–æ–∫–µ"""
    asyncio.run_coroutine_threadsafe(coro, mqtt_loop)

async def broadcast_to_clients(data):
    """–†–∞—Å—Å—ã–ª–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º WebSocket –∫–ª–∏–µ–Ω—Ç–∞–º"""
    for client in connected_clients[:]:
        try:
            await client.send_json(data)
        except:
            connected_clients.remove(client)

def on_mqtt_connect(client, userdata, flags, rc):
    logger.info("‚úÖ Backend –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ MQTT –±—Ä–æ–∫–µ—Ä—É")
    client.subscribe("zigbee2mqtt/#")

def on_mqtt_message(client, userdata, msg):
    try:
     payload = json.loads(msg.payload.decode())
     topic = msg.topic
     
     # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
     if "bridge/event" in topic:
         event_type = payload.get("type", "")
         
         if event_type == "device_joined":
             device_data = payload.get("data", {})
             if device_data.get("ieee_address") == "0xa4c1386e2399139d":
                 logger.info("üéâ –î–∞—Ç—á–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —Å–µ—Ç–∏!")
                 garage_state["sensor_online"] = True
         
         elif event_type == "device_leave":
             device_data = payload.get("data", {})
             if device_data.get("ieee_address") == "0xa4c1386e2399139d":
                 logger.warning("‚ö†Ô∏è –î–∞—Ç—á–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç —Å–µ—Ç–∏!")
                 garage_state["sensor_online"] = False
     
     # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –¥–∞—Ç—á–∏–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
     elif "0xa4c1386e2399139d" in topic:
         logger.info(f"üìä –î–∞–Ω–Ω—ã–µ –æ—Ç –¥–∞—Ç—á–∏–∫–∞: {payload}")
         
         # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∞—Ç—á–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω—ã–º
         process_temperature_sensor_data(payload)
     
     # –û—Å—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞...
     
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ MQTT: {e}")

def process_temperature_sensor_data(payload):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"""
    garage_state["sensor_online"] = True
    garage_state["last_sensor_update"] = datetime.now().isoformat()
    
    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ —Ä–∞–∑–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–∞—Ö
    temperature_fields = ["temperature", "temp", "current_temperature"]
    humidity_fields = ["humidity", "hum", "current_humidity"]
    battery_fields = ["battery", "battery_level", "voltage"]
    
    # –ò—â–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
    for field in temperature_fields:
        if field in payload and isinstance(payload[field], (int, float)):
            garage_state["temperature"] = round(payload[field], 1)
            logger.info(f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {garage_state['temperature']}¬∞C")
            break
    
    # –ò—â–µ–º –≤–ª–∞–∂–Ω–æ—Å—Ç—å
    for field in humidity_fields:
        if field in payload and isinstance(payload[field], (int, float)):
            garage_state["humidity"] = round(payload[field], 1)
            logger.info(f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {garage_state['humidity']}%")
            break
    
    # –ò—â–µ–º –±–∞—Ç–∞—Ä–µ—é
    for field in battery_fields:
        if field in payload and isinstance(payload[field], (int, float)):
            garage_state["battery_level"] = payload[field]
            logger.info(f"üîã –ë–∞—Ç–∞—Ä–µ—è: {garage_state['battery_level']}%")
            break
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ª—è, –∏—â–µ–º –ª—é–±—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if "temperature" not in garage_state or "humidity" not in garage_state:
        for key, value in payload.items():
            if isinstance(value, (int, float)):
                if 10 <= value <= 40:  # –î–∏–∞–ø–∞–∑–æ–Ω —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
                    garage_state["temperature"] = round(value, 1)
                    logger.info(f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ): {value}¬∞C –∏–∑ –ø–æ–ª—è '{key}'")
                elif 0 <= value <= 100:  # –î–∏–∞–ø–∞–∑–æ–Ω –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
                    garage_state["humidity"] = round(value, 1)
                    logger.info(f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ): {value}% –∏–∑ –ø–æ–ª—è '{key}'")

def start_mqtt_loop():
    """–ó–∞–ø—É—Å–∫ event loop –¥–ª—è MQTT –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    asyncio.set_event_loop(mqtt_loop)
    mqtt_loop.run_forever()

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Backend API...")
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º MQTT loop –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        mqtt_thread = threading.Thread(target=start_mqtt_loop, daemon=True)
        mqtt_thread.start()
        
        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫ loop
        await asyncio.sleep(1)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º MQTT –∫–ª–∏–µ–Ω—Ç
        mqtt_host = os.getenv("MQTT_HOST", "mosquitto")
        mqtt_client.on_connect = on_mqtt_connect
        mqtt_client.on_message = on_mqtt_message
        mqtt_client.connect(mqtt_host, 1883, 60)
        mqtt_client.loop_start()
        
        logger.info("‚úÖ MQTT –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ MQTT –∫–ª–∏–µ–Ω—Ç–∞: {e}")
    
    yield  # –†–∞–±–æ—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    
    # Shutdown
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Backend API...")
    mqtt_client.loop_stop()
    mqtt_loop.stop()

app = FastAPI(title="Smart Garage Backend", lifespan=lifespan)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    connected_clients.append(websocket)
    
    try:
        # –ü—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        garage_state["system_info"] = get_system_info()
        await websocket.send_json(garage_state)
        
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        while True:
            await asyncio.sleep(5)
            garage_state["system_info"] = get_system_info()
            await websocket.send_json(garage_state)
            
    except Exception as e:
        logger.error(f"‚ùå WebSocket –æ—à–∏–±–∫–∞: {e}")
    finally:
        if websocket in connected_clients:
            connected_clients.remove(websocket)

@app.post("/api/control/door")
async def control_door():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–µ—Ä—å—é –≥–∞—Ä–∞–∂–∞"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ Zigbee2MQTT –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–µ—Ä—å—é
        mqtt_client.publish(
            "zigbee2mqtt/door_controller/set",
            json.dumps({"action": "toggle"})
        )
        
        return {
            "status": "success", 
            "message": "–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–µ—Ä—å—é"
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–µ—Ä—å—é: {e}")
        return {"status": "error", "message": str(e)}

@app.post("/api/control/light")
async def control_light():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–µ—Ç–æ–º"""
    try:
        new_state = "ON" if not garage_state["light_on"] else "OFF"
        brightness = 255 if new_state == "ON" else 0
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ Zigbee2MQTT
        mqtt_client.publish(
            "zigbee2mqtt/light_switch/set",
            json.dumps({
                "state": new_state,
                "brightness": brightness
            })
        )
        
        return {
            "status": "success",
            "light_on": new_state == "ON",
            "message": f"–°–≤–µ—Ç {'–≤–∫–ª—é—á–µ–Ω' if new_state == 'ON' else '–≤—ã–∫–ª—é—á–µ–Ω'}"
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–µ—Ç–æ–º: {e}")
        return {"status": "error", "message": str(e)}

@app.post("/api/control/light_brightness")
async def control_light_brightness(request: BrightnessRequest):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç—å—é —Å–≤–µ—Ç–∞"""
    try:
        brightness = request.brightness
        
        if brightness < 0 or brightness > 255:
            return {"status": "error", "message": "–Ø—Ä–∫–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 255"}
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ Zigbee2MQTT
        mqtt_client.publish(
            "zigbee2mqtt/light_switch/set",
            json.dumps({
                "state": "ON" if brightness > 0 else "OFF",
                "brightness": brightness
            })
        )
        
        return {
            "status": "success",
            "brightness": brightness,
            "light_on": brightness > 0,
            "message": f"–Ø—Ä–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {round((brightness / 255) * 100)}%"
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —è—Ä–∫–æ—Å—Ç—å—é: {e}")
        return {"status": "error", "message": str(e)}

@app.get("/api/devices")
async def get_devices():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ Zigbee2MQTT
    return {
        "status": "success",
        "devices": [
            "temperature_sensor",
            "door_sensor", 
            "motion_sensor",
            "light_switch"
        ]
    }

@app.get("/api/status")
async def get_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
    garage_state["system_info"] = get_system_info()
    return garage_state

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000, log_level="info")
