import json
import logging
import asyncio
from datetime import datetime
import paho.mqtt.client as mqtt
from fastapi import FastAPI, WebSocket
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
import os
import threading
import psutil
import time
from pydantic import BaseModel

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
garage_state = {
    "temperature": 20.0,
    "humidity": 45.0,
    "temperature_battery": 100,           # –ù–æ–≤–æ–µ –ø–æ–ª–µ - –±–∞—Ç–∞—Ä–µ—è –¥–∞—Ç—á–∏–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    "temperature_linkquality": 0,         # –ù–æ–≤–æ–µ –ø–æ–ª–µ - —É—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞ –¥–∞—Ç—á–∏–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    "temperature_device_id": "temperature_sensor",  # –ù–æ–≤–æ–µ –ø–æ–ª–µ - ID –¥–∞—Ç—á–∏–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    "door_open": False,
    "door_battery": 100,           
    "door_linkquality": 0,    
    "door_device_id": "door_sensor",
    "motion_detected": False,
    "motion_battery": 100,           # –ù–æ–≤–æ–µ –ø–æ–ª–µ - –±–∞—Ç–∞—Ä–µ—è –¥–∞—Ç—á–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è
    "motion_linkquality": 0,         # –ù–æ–≤–æ–µ –ø–æ–ª–µ - —É—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞ –¥–∞—Ç—á–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è
    "motion_device_id": "motion_sensor",  # –ù–æ–≤–æ–µ –ø–æ–ª–µ - ID –¥–∞—Ç—á–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è
    "light_on": False,
    "light_brightness": 0,
    "light_color_temp": 300,            # –ù–û–í–û–ï - —Ü–≤–µ—Ç–æ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
    "light_device_id": "smart_bulb",  # –ù–û–í–û–ï - ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    "light_linkquality": 0,           # –ù–û–í–û–ï - –∫–∞—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–∏
    "light_voltage": 0,                # –ù–û–í–û–ï - –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ
    "water_leak_1": False,           # –ù–æ–≤–æ–µ –ø–æ–ª–µ - –¥–∞—Ç—á–∏–∫ –ø—Ä–æ—Ç–µ—á–∫–∏ 1
    "water_battery_1": 100,          # –ë–∞—Ç–∞—Ä–µ—è –¥–∞—Ç—á–∏–∫–∞ 1
    "water_device_id_1": "water_leak_1",         # ID –¥–∞—Ç—á–∏–∫–∞ 1
    "water_leak_2": False,           # –ù–æ–≤–æ–µ –ø–æ–ª–µ - –¥–∞—Ç—á–∏–∫ –ø—Ä–æ—Ç–µ—á–∫–∏ 2  
    "water_battery_2": 100,          # –ë–∞—Ç–∞—Ä–µ—è –¥–∞—Ç—á–∏–∫–∞ 2
    "water_device_id_2": "water_leak_2",         # ID –¥–∞—Ç—á–∏–∫–∞ 2
    "last_update": None,
    "system_info": {
        "cpu_percent": 0,
        "memory_percent": 0,
        "disk_usage": 0,
        "uptime": 0
    }
}

connected_clients = []
mqtt_loop = asyncio.new_event_loop()
mqtt_client = mqtt.Client()

class BrightnessRequest(BaseModel):
    brightness: int

def get_system_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    try:
        return {
            "cpu_percent": psutil.cpu_percent(),
            "memory_percent": psutil.virtual_memory().percent,
            "disk_usage": psutil.disk_usage('/').percent,
            "uptime": int(time.time() - psutil.boot_time())
        }
    except:
        return {
            "cpu_percent": 0,
            "memory_percent": 0,
            "disk_usage": 0,
            "uptime": 0
        }

def run_async_in_mqtt_thread(coro):
    """–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ MQTT –ø–æ—Ç–æ–∫–µ"""
    asyncio.run_coroutine_threadsafe(coro, mqtt_loop)

async def broadcast_to_clients(data):
    """–†–∞—Å—Å—ã–ª–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º WebSocket –∫–ª–∏–µ–Ω—Ç–∞–º"""
    for client in connected_clients[:]:
        try:
            await client.send_json(data)
        except:
            connected_clients.remove(client)

def on_mqtt_connect(client, userdata, flags, rc):
    logger.info("‚úÖ Backend –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ MQTT –±—Ä–æ–∫–µ—Ä—É")
    client.subscribe("zigbee2mqtt/#")

def on_mqtt_message(client, userdata, msg):
    try:
        payload = json.loads(msg.payload.decode())
        topic = msg.topic
        logger.info(f"üì® MQTT —Å–æ–æ–±—â–µ–Ω–∏–µ: {topic} -> {payload}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ payload, –∞ –Ω–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–ø–∏–∫–∞

        if "temperature" in payload:
            garage_state["temperature"] = payload.get("temperature", garage_state["temperature"])
            garage_state["humidity"] = payload.get("humidity", garage_state["humidity"])
            garage_state["temperature_battery"] = payload.get("battery", garage_state["temperature_battery"])  # –î–æ–±–∞–≤–ª–µ–Ω–æ
            garage_state["temperature_linkquality"] = payload.get("linkquality", garage_state["temperature_linkquality"])  # –î–æ–±–∞–≤–ª–µ–Ω–æ
            logger.info(f"üå°Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {garage_state['temperature']}¬∞C")
            
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞ –¥–≤–µ—Ä–∏
        elif "door_sensor" in topic:  # –í–∞—à –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–∞—Ç—á–∏–∫
            garage_state["door_open"] = not payload.get("contact", True)
            garage_state["door_battery"] = payload.get("battery", 100)
            garage_state["door_linkquality"] = payload.get("linkquality", 0)  
            door_status = "–æ—Ç–∫—Ä—ã—Ç–∞" if garage_state["door_open"] else "–∑–∞–∫—Ä—ã—Ç–∞"
            logger.info(f"üö™ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–≤–µ—Ä–∏: {door_status}")
            
        elif "occupancy" in payload:
            garage_state["motion_detected"] = payload.get("occupancy", False)
            garage_state["motion_battery"] = payload.get("battery", garage_state["motion_battery"])
            garage_state["motion_linkquality"] = payload.get("linkquality", garage_state["motion_linkquality"])
            garage_state["motion_device_id"] = topic.split('/')[-1]  # –ë–µ—Ä–µ–º ID –∏–∑ —Ç–æ–ø–∏–∫–∞
            logger.info(f"üë§ –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–≤–∏–∂–µ–Ω–∏–µ: {'–æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ' if garage_state['motion_detected'] else '–Ω–µ—Ç'}, –±–∞—Ç–∞—Ä–µ—è: {garage_state['motion_battery']}%, —Å–∏–≥–Ω–∞–ª: {garage_state['motion_linkquality']}")
     
       # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —É–º–Ω–æ–π –ª–∞–º–ø–æ—á–∫–∏
        elif "smart_bulb" in topic:
           garage_state["light_on"] = payload.get("state", "OFF") == "ON"
           garage_state["light_brightness"] = payload.get("brightness", 0)
           garage_state["light_color_temp"] = payload.get("color_temp", garage_state["light_color_temp"])
           garage_state["light_device_id"] = topic.split('/')[-1]  # –ë–µ—Ä–µ–º ID –∏–∑ —Ç–æ–ø–∏–∫–∞
           garage_state["light_linkquality"] = payload.get("linkquality", garage_state["light_linkquality"]) 
           garage_state["light_voltage"] = payload.get("voltage", garage_state["light_voltage"]) 
           light_status = "–≤–∫–ª—é—á–µ–Ω–∞" if garage_state["light_on"] else "–≤—ã–∫–ª—é—á–µ–Ω"
           logger.info(f"üí° –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ª–∞–º–ø–æ—á–∫–∞: {light_status}, —è—Ä–∫–æ—Å—Ç—å: {garage_state['light_brightness']}, —Ü–≤–µ—Ç–æ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {garage_state['light_color_temp']}K")

               
         # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—á–∏–∫–∏ –ø—Ä–æ—Ç–µ—á–∫–∏ –≤–æ–¥—ã
        elif "water" in topic.lower() or "leak" in topic.lower():
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π —ç—Ç–æ –¥–∞—Ç—á–∏–∫ –ø–æ ID –≤ —Ç–æ–ø–∏–∫–µ
            if "first" in topic.lower() or "1" in topic or "0xa4c1389122c0f5f0" in topic:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID
                garage_state["water_leak_1"] = payload.get("water_leak", False)
                garage_state["water_battery_1"] = payload.get("battery", 100)
                garage_state["water_device_id_1"] = topic.split('/')[-1]  # –ë–µ—Ä–µ–º ID –∏–∑ —Ç–æ–ø–∏–∫–∞
                logger.info(f"üíß –î–∞—Ç—á–∏–∫ –ø—Ä–æ—Ç–µ—á–∫–∏ 1: {'–û–ë–ù–ê–†–£–ñ–ï–ù–û' if garage_state['water_leak_1'] else '–ù–æ—Ä–º–∞'}")
                
            elif "second" in topic.lower() or "2" in topic or "0x0xa4c13833fff3d106" in topic:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID  
                garage_state["water_leak_2"] = payload.get("water_leak", False)
                garage_state["water_battery_2"] = payload.get("battery", 100)
                garage_state["water_device_id_2"] = topic.split('/')[-1]
                logger.info(f"üíß –î–∞—Ç—á–∏–∫ –ø—Ä–æ—Ç–µ—á–∫–∏ 2: {'–û–ë–ù–ê–†–£–ñ–ï–ù–û' if garage_state['water_leak_2'] else '–ù–æ—Ä–º–∞'}")
        
        # –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        garage_state["system_info"] = get_system_info()
        garage_state["last_update"] = datetime.now().isoformat()
        
        # –†–∞—Å—Å—ã–ª–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        run_async_in_mqtt_thread(broadcast_to_clients(garage_state.copy()))
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ MQTT —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def process_temperature_sensor_data(payload):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"""
    garage_state["sensor_online"] = True
    garage_state["last_sensor_update"] = datetime.now().isoformat()
    
    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ —Ä–∞–∑–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–∞—Ö
    temperature_fields = ["temperature", "temp", "current_temperature"]
    humidity_fields = ["humidity", "hum", "current_humidity"]
    battery_fields = ["battery", "battery_level", "voltage"]
    
    # –ò—â–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
    for field in temperature_fields:
        if field in payload and isinstance(payload[field], (int, float)):
            garage_state["temperature"] = round(payload[field], 1)
            logger.info(f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {garage_state['temperature']}¬∞C")
            break
    
    # –ò—â–µ–º –≤–ª–∞–∂–Ω–æ—Å—Ç—å
    for field in humidity_fields:
        if field in payload and isinstance(payload[field], (int, float)):
            garage_state["humidity"] = round(payload[field], 1)
            logger.info(f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {garage_state['humidity']}%")
            break
    
    # –ò—â–µ–º –±–∞—Ç–∞—Ä–µ—é
    for field in battery_fields:
        if field in payload and isinstance(payload[field], (int, float)):
            garage_state["battery_level"] = payload[field]
            logger.info(f"üîã –ë–∞—Ç–∞—Ä–µ—è: {garage_state['battery_level']}%")
            break
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ª—è, –∏—â–µ–º –ª—é–±—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if "temperature" not in garage_state or "humidity" not in garage_state:
        for key, value in payload.items():
            if isinstance(value, (int, float)):
                if 10 <= value <= 40:  # –î–∏–∞–ø–∞–∑–æ–Ω —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
                    garage_state["temperature"] = round(value, 1)
                    logger.info(f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ): {value}¬∞C –∏–∑ –ø–æ–ª—è '{key}'")
                elif 0 <= value <= 100:  # –î–∏–∞–ø–∞–∑–æ–Ω –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
                    garage_state["humidity"] = round(value, 1)
                    logger.info(f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ): {value}% –∏–∑ –ø–æ–ª—è '{key}'")

def start_mqtt_loop():
    """–ó–∞–ø—É—Å–∫ event loop –¥–ª—è MQTT –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    asyncio.set_event_loop(mqtt_loop)
    mqtt_loop.run_forever()

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Backend API...")
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º MQTT loop –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        mqtt_thread = threading.Thread(target=start_mqtt_loop, daemon=True)
        mqtt_thread.start()
        
        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫ loop
        await asyncio.sleep(1)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º MQTT –∫–ª–∏–µ–Ω—Ç
        mqtt_host = os.getenv("MQTT_HOST", "mosquitto")
        mqtt_client.on_connect = on_mqtt_connect
        mqtt_client.on_message = on_mqtt_message
        mqtt_client.connect(mqtt_host, 1883, 60)
        mqtt_client.loop_start()
        
        logger.info("‚úÖ MQTT –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ MQTT –∫–ª–∏–µ–Ω—Ç–∞: {e}")
    
    yield  # –†–∞–±–æ—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    
    # Shutdown
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Backend API...")
    mqtt_client.loop_stop()
    mqtt_loop.stop()

app = FastAPI(title="Smart Garage Backend", lifespan=lifespan)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://85.237.34.9:5000",
        "http://localhost:5000",
        "http://127.0.0.1:5000"
    ],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    connected_clients.append(websocket)
    logger.info(f" WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω: {websocket.client}") 

    try:
        # –ü—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        garage_state["system_info"] = get_system_info()
        await websocket.send_json(garage_state)
        
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        while True:
            await asyncio.sleep(5)
            garage_state["system_info"] = get_system_info()
            await websocket.send_json(garage_state)
            
    except Exception as e:
        logger.error(f"‚ùå WebSocket –æ—à–∏–±–∫–∞: {e}")
    finally:
        if websocket in connected_clients:
            connected_clients.remove(websocket)
        logger.info(" WebSocket –æ—Ç–∫–ª—é—á–µ–Ω")

@app.post("/api/control/light")
async def control_light():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–µ—Ç–æ–º"""
    try:
        new_state = "ON" if not garage_state["light_on"] else "OFF"
        brightness = 255 if new_state == "ON" else 0
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ Zigbee2MQTT
        mqtt_client.publish(
            "zigbee2mqtt/smart_bulb/set",  # –ò–ó–ú–ï–ù–ò–¢–ï –ù–ê smart_bulb
            json.dumps({
                "state": new_state,
                "brightness": brightness
            })
        )
        
        return {
            "status": "success",
            "light_on": new_state == "ON",
            "message": f"–°–≤–µ—Ç {'–≤–∫–ª—é—á–µ–Ω' if new_state == 'ON' else '–≤—ã–∫–ª—é—á–µ–Ω'}"
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–µ—Ç–æ–º: {e}")
        return {"status": "error", "message": str(e)}

@app.post("/api/control/light_brightness")
async def control_light_brightness(request: BrightnessRequest):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç—å—é —Å–≤–µ—Ç–∞"""
    try:
        brightness = request.brightness
        
        if brightness < 0 or brightness > 255:
            return {"status": "error", "message": "–Ø—Ä–∫–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 255"}
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ Zigbee2MQTT
        mqtt_client.publish(
            "zigbee2mqtt/smart_bulb/set",  # –ò–ó–ú–ï–ù–ò–¢–ï –ù–ê smart_bulb
            json.dumps({
                "state": "ON" if brightness > 0 else "OFF",
                "brightness": brightness
            })
        )
        
        return {
            "status": "success",
            "brightness": brightness,
            "light_on": brightness > 0,
            "message": f"–Ø—Ä–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {round((brightness / 255) * 100)}%"
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —è—Ä–∫–æ—Å—Ç—å—é: {e}")
        return {"status": "error", "message": str(e)}

@app.post("/api/control/light_color_temp")
async def control_light_color_temp(request: dict):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π —Å–≤–µ—Ç–∞"""
    try:
        color_temp = request.get("color_temp", 300)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –ª–∞–º–ø—ã)
        color_temp = max(150, min(500, color_temp))
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ Zigbee2MQTT
        mqtt_client.publish(
            "zigbee2mqtt/smart_bulb/set",  # –ò–ó–ú–ï–ù–ò–¢–ï –ù–ê smart_bulb
            json.dumps({
                "color_temp": color_temp
            })
        )
        
        return {
            "status": "success",
            "color_temp": color_temp,
            "message": f"–¶–≤–µ—Ç–æ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {color_temp}K"
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π: {e}")
        return {"status": "error", "message": str(e)}

@app.post("/api/control/door")
async def control_door():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–µ—Ä—å—é –≥–∞—Ä–∞–∂–∞"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ Zigbee2MQTT –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–µ—Ä—å—é
        mqtt_client.publish(
            "zigbee2mqtt/door_controller/set",
            json.dumps({"action": "toggle"})
        )
        
        return {
            "status": "success", 
            "message": "–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–µ—Ä—å—é"
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–µ—Ä—å—é: {e}")
        return {"status": "error", "message": str(e)}

@app.post("/api/control/light")
async def control_light():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–µ—Ç–æ–º"""
    try:
        new_state = "ON" if not garage_state["light_on"] else "OFF"
        brightness = 255 if new_state == "ON" else 0
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ Zigbee2MQTT
        mqtt_client.publish(
            "zigbee2mqtt/light_switch/set",
            json.dumps({
                "state": new_state,
                "brightness": brightness
            })
        )
        
        return {
            "status": "success",
            "light_on": new_state == "ON",
            "message": f"–°–≤–µ—Ç {'–≤–∫–ª—é—á–µ–Ω' if new_state == 'ON' else '–≤—ã–∫–ª—é—á–µ–Ω'}"
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–µ—Ç–æ–º: {e}")
        return {"status": "error", "message": str(e)}

@app.post("/api/control/light_brightness")
async def control_light_brightness(request: BrightnessRequest):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç—å—é —Å–≤–µ—Ç–∞"""
    try:
        brightness = request.brightness
        
        if brightness < 0 or brightness > 255:
            return {"status": "error", "message": "–Ø—Ä–∫–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 255"}
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ Zigbee2MQTT
        mqtt_client.publish(
            "zigbee2mqtt/light_switch/set",
            json.dumps({
                "state": "ON" if brightness > 0 else "OFF",
                "brightness": brightness
            })
        )
        
        return {
            "status": "success",
            "brightness": brightness,
            "light_on": brightness > 0,
            "message": f"–Ø—Ä–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {round((brightness / 255) * 100)}%"
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —è—Ä–∫–æ—Å—Ç—å—é: {e}")
        return {"status": "error", "message": str(e)}

@app.get("/api/devices")
async def get_devices():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    return {
        "status": "success",
        "devices": [
            {
                "type": "temperature_sensor",
                "id": garage_state.get("temperature_device_id", "unknown"),
                "battery": garage_state.get("temperature_battery", 0),
                "linkquality": garage_state.get("temperature_linkquality", 0),
                "status": f"{garage_state.get('temperature', 0)}¬∞C, {garage_state.get('humidity', 0)}%"
            },
            {
                "type": "door_sensor", 
                "id": garage_state.get("door_device_id", "unknown"),
                "battery": garage_state.get("door_battery", 0),
                "linkquality": garage_state.get("door_linkquality", 0),
                "status": "open" if garage_state.get("door_open") else "closed"
            },
            {
                "type": "motion_sensor",
                "id": garage_state.get("motion_device_id", "unknown"),
                "battery": garage_state.get("motion_battery", 0),
                "linkquality": garage_state.get("motion_linkquality", 0),
                "status": "motion" if garage_state.get("motion_detected") else "no_motion"
            },
            "light_switch"
        ]
    }

@app.get("/api/water_sensors")
async def get_water_sensors():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞—Ç—á–∏–∫–∞—Ö –ø—Ä–æ—Ç–µ—á–∫–∏"""
    return {
        "status": "success",
        "sensors": {
            "sensor_1": {
                "leak": garage_state.get("water_leak_1", False),
                "battery": garage_state.get("water_battery_1", 100),
                "device_id": garage_state.get("water_device_id_1", ""),
                "status": "leak" if garage_state.get("water_leak_1") else "normal"
            },
            "sensor_2": {
                "leak": garage_state.get("water_leak_2", False),
                "battery": garage_state.get("water_battery_2", 100),
                "device_id": garage_state.get("water_device_id_2", ""),
                "status": "leak" if garage_state.get("water_leak_2") else "normal"
            }
        }
    }

@app.get("/api/status")
async def get_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
    garage_state["system_info"] = get_system_info()
    return garage_state

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000, log_level="info")
