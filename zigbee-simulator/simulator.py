# /home/andrey/Projects/garage/zigbee-simulator/simulator.py
import time
import json
import random
import logging
from datetime import datetime
import paho.mqtt.client as mqtt
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("ZigbeeSimulator")

class ZigbeeDeviceSimulator:
    def __init__(self):
        self.mqtt_client = None
        self.is_running = True
        
        # –°–æ—Å—Ç–æ—è–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        self.devices = {
            "garage_temperature_sensor": {
                "temperature": 20.0,
                "humidity": 45.0,
                "pressure": 1013.25,
                "battery": 100,
                "voltage": 3000
            },
            "garage_door_sensor": {
                "contact": True,  # True = –∑–∞–∫—Ä—ã—Ç–æ, False = –æ—Ç–∫—Ä—ã—Ç–æ
                "battery": 100,
                "voltage": 3000
            },
            "garage_motion_sensor": {
                "occupancy": False,
                "battery": 100,
                "voltage": 3000,
                "illuminance": 0
            },
            "garage_light_switch": {
                "state": "OFF",
                "brightness": 0,
                "color_temp": 370
            }
        }
    
    def connect_mqtt(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MQTT –±—Ä–æ–∫–µ—Ä—É"""
        try:
            mqtt_host = os.getenv("MQTT_HOST", "mosquitto")
            self.mqtt_client = mqtt.Client()
            self.mqtt_client.connect(mqtt_host, 1883, 60)
            self.mqtt_client.loop_start()
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            self.mqtt_client.subscribe("zigbee2mqtt/garage_light_switch/set")
            self.mqtt_client.on_message = self.on_message
            
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ MQTT –±—Ä–æ–∫–µ—Ä—É: {mqtt_host}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MQTT: {e}")
            return False
    
    def on_message(self, client, userdata, msg):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö MQTT —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            topic = msg.topic
            payload = json.loads(msg.payload.decode())
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {topic} -> {payload}")
            
            if "garage_light_switch/set" in topic:
                if "state" in payload:
                    self.devices["garage_light_switch"]["state"] = payload["state"]
                    self.publish_device_state("garage_light_switch")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def publish_device_state(self, device_name):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        if not self.mqtt_client:
            return
            
        topic = f"zigbee2mqtt/{device_name}"
        payload = self.devices[device_name].copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        payload["linkquality"] = random.randint(80, 100)
        payload["last_seen"] = datetime.now().isoformat()
        
        self.mqtt_client.publish(topic, json.dumps(payload))
        logger.debug(f"üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {topic} -> {payload}")
    
    def simulate_temperature_sensor(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –¥–∞—Ç—á–∏–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã/–≤–ª–∞–∂–Ω–æ—Å—Ç–∏"""
        logger.info("üå°Ô∏è –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã")
        
        while self.is_running:
            try:
                # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
                hour = datetime.now().hour
                if 2 <= hour <= 6:  # –ù–æ—á—å
                    temp_change = random.uniform(-0.2, 0.05)
                elif 12 <= hour <= 16:  # –î–µ–Ω—å
                    temp_change = random.uniform(-0.05, 0.2)
                else:
                    temp_change = random.uniform(-0.1, 0.1)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
                self.devices["garage_temperature_sensor"]["temperature"] = round(
                    max(15, min(30, self.devices["garage_temperature_sensor"]["temperature"] + temp_change)), 1
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤–ª–∞–∂–Ω–æ—Å—Ç—å
                self.devices["garage_temperature_sensor"]["humidity"] = round(
                    max(30, min(80, 45 + random.uniform(-5, 5))), 1
                )
                
                # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.publish_device_state("garage_temperature_sensor")
                
                time.sleep(30)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: {e}")
                time.sleep(5)
    
    def simulate_door_sensor(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –¥–∞—Ç—á–∏–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è –¥–≤–µ—Ä–∏"""
        logger.info("üö™ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –¥–∞—Ç—á–∏–∫–∞ –¥–≤–µ—Ä–∏")
        
        while self.is_running:
            try:
                # –°–ª—É—á–∞–π–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (1% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
                if random.random() < 0.01:
                    old_state = self.devices["garage_door_sensor"]["contact"]
                    self.devices["garage_door_sensor"]["contact"] = not old_state
                    
                    status = "–∑–∞–∫—Ä—ã—Ç–∞" if self.devices["garage_door_sensor"]["contact"] else "–æ—Ç–∫—Ä—ã—Ç–∞"
                    logger.info(f"üö™ –î–≤–µ—Ä—å {status}")
                
                # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.publish_device_state("garage_door_sensor")
                
                time.sleep(10)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ –¥–≤–µ—Ä–∏: {e}")
                time.sleep(5)
    
    def simulate_motion_sensor(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –¥–∞—Ç—á–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è"""
        logger.info("üë§ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –¥–∞—Ç—á–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è")
        
        motion_active = False
        motion_timer = 0
        
        while self.is_running:
            try:
                if motion_active:
                    motion_timer -= 1
                    if motion_timer <= 0:
                        motion_active = False
                        self.devices["garage_motion_sensor"]["occupancy"] = False
                        logger.info("üë§ –î–≤–∏–∂–µ–Ω–∏–µ –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª–æ—Å—å")
                else:
                    # 3% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
                    if random.random() < 0.03:
                        motion_active = True
                        motion_timer = random.randint(5, 15)  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è
                        self.devices["garage_motion_sensor"]["occupancy"] = True
                        logger.info("üë§ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–≤–∏–∂–µ–Ω–∏–µ!")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å
                hour = datetime.now().hour
                if 6 <= hour <= 18:  # –î–µ–Ω—å
                    self.devices["garage_motion_sensor"]["illuminance"] = random.randint(100, 500)
                else:  # –ù–æ—á—å
                    self.devices["garage_motion_sensor"]["illuminance"] = random.randint(0, 50)
                
                # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.publish_device_state("garage_motion_sensor")
                
                time.sleep(2)  # –ß–∞—Å—Ç—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ –¥–≤–∏–∂–µ–Ω–∏—è: {e}")
                time.sleep(5)
    
    def simulate_light_switch(self):
        """–°–∏–º—É–ª—è—Ü–∏—è —É–º–Ω–æ–≥–æ –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—è"""
        logger.info("üí° –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ —É–º–Ω–æ–≥–æ —Å–≤–µ—Ç–∞")
        
        while self.is_running:
            try:
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–µ—Ç–æ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–≤–∏–∂–µ–Ω–∏—è
                if (self.devices["garage_motion_sensor"]["occupancy"] and 
                    self.devices["garage_motion_sensor"]["illuminance"] < 50):
                    if self.devices["garage_light_switch"]["state"] == "OFF":
                        self.devices["garage_light_switch"]["state"] = "ON"
                        self.devices["garage_light_switch"]["brightness"] = 255
                        logger.info("üí° –°–≤–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–µ–Ω")
                
                # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.publish_device_state("garage_light_switch")
                
                time.sleep(5)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ —Å–≤–µ—Ç–∞: {e}")
                time.sleep(5)
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–∏–º—É–ª—è—Ç–æ—Ä–æ–≤"""
        if not self.connect_mqtt():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ç–æ—Ä")
            return False
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–∏–º—É–ª—è—Ç–æ—Ä–æ–≤ Zigbee —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ç–æ—Ä—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
        import threading
        
        threads = [
            threading.Thread(target=self.simulate_temperature_sensor, daemon=True),
            threading.Thread(target=self.simulate_door_sensor, daemon=True),
            threading.Thread(target=self.simulate_motion_sensor, daemon=True),
            threading.Thread(target=self.simulate_light_switch, daemon=True)
        ]
        
        for thread in threads:
            thread.start()
        
        logger.info("‚úÖ –í—Å–µ —Å–∏–º—É–ª—è—Ç–æ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã!")
        return True
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞"""
        self.is_running = False
        if self.mqtt_client:
            self.mqtt_client.loop_stop()
        logger.info("üõë –°–∏–º—É–ª—è—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    simulator = ZigbeeDeviceSimulator()
    
    try:
        if simulator.start():
            # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã
            while simulator.is_running:
                time.sleep(1)
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ç–æ—Ä Zigbee —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è...")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        simulator.stop()

if __name__ == "__main__":
    main()
