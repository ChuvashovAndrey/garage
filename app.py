# /home/andrey/Projects/garage/app.py
import json
import logging
import asyncio
from datetime import datetime
import paho.mqtt.client as mqtt
from fastapi import FastAPI, Request, WebSocket
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse
from contextlib import asynccontextmanager
import os
import threading
import psutil
import time

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –î–û —Å–æ–∑–¥–∞–Ω–∏—è app
garage_state = {
    "temperature": 20.0,
    "humidity": 45.0,
    "door_open": False,
    "motion_detected": False,
    "light_on": False,
    "light_brightness": 0,
    "last_update": None,
    "system_info": {
        "cpu_percent": 0,
        "memory_percent": 0,
        "disk_usage": 0,
        "uptime": 0
    }
}

connected_clients = []
mqtt_loop = asyncio.new_event_loop()
mqtt_client = mqtt.Client()

def get_system_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    try:
        return {
            "cpu_percent": psutil.cpu_percent(),
            "memory_percent": psutil.virtual_memory().percent,
            "disk_usage": psutil.disk_usage('/').percent,
            "uptime": int(time.time() - psutil.boot_time())
        }
    except:
        return {
            "cpu_percent": 0,
            "memory_percent": 0,
            "disk_usage": 0,
            "uptime": 0
        }

def run_async_in_mqtt_thread(coro):
    """–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ MQTT –ø–æ—Ç–æ–∫–µ"""
    asyncio.run_coroutine_threadsafe(coro, mqtt_loop)

async def broadcast_to_clients(data):
    """–†–∞—Å—Å—ã–ª–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º WebSocket –∫–ª–∏–µ–Ω—Ç–∞–º"""
    for client in connected_clients[:]:
        try:
            await client.send_json(data)
        except:
            connected_clients.remove(client)

def on_mqtt_connect(client, userdata, flags, rc):
    logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ MQTT –±—Ä–æ–∫–µ—Ä—É")
    client.subscribe("zigbee2mqtt/#")

def on_mqtt_message(client, userdata, msg):
    try:
        payload = json.loads(msg.payload.decode())
        topic = msg.topic
        
        if "garage_temperature_sensor" in topic:
            garage_state["temperature"] = payload.get("temperature", 20.0)
            garage_state["humidity"] = payload.get("humidity", 45.0)
            
        elif "garage_door_sensor" in topic:
            garage_state["door_open"] = not payload.get("contact", True)
            
        elif "garage_motion_sensor" in topic:
            garage_state["motion_detected"] = payload.get("occupancy", False)
            
        elif "garage_light_switch" in topic:
            garage_state["light_on"] = payload.get("state", "OFF") == "ON"
            garage_state["light_brightness"] = payload.get("brightness", 0)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        garage_state["system_info"] = get_system_info()
        garage_state["last_update"] = datetime.now().isoformat()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º event loop
        run_async_in_mqtt_thread(broadcast_to_clients(garage_state.copy()))
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ MQTT —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def start_mqtt_loop():
    """–ó–∞–ø—É—Å–∫ event loop –¥–ª—è MQTT –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    asyncio.set_event_loop(mqtt_loop)
    mqtt_loop.run_forever()

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º MQTT loop –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        mqtt_thread = threading.Thread(target=start_mqtt_loop, daemon=True)
        mqtt_thread.start()
        
        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫ loop
        await asyncio.sleep(1)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º MQTT –∫–ª–∏–µ–Ω—Ç
        mqtt_host = os.getenv("MQTT_HOST", "mosquitto")
        mqtt_client.on_connect = on_mqtt_connect
        mqtt_client.on_message = on_mqtt_message
        mqtt_client.connect(mqtt_host, 1883, 60)
        mqtt_client.loop_start()
        
        logger.info("‚úÖ MQTT –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ MQTT –∫–ª–∏–µ–Ω—Ç–∞: {e}")
    
    yield  # –†–∞–±–æ—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    
    # Shutdown
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    mqtt_client.loop_stop()
    mqtt_loop.stop()

app = FastAPI(title="Smart Garage", lifespan=lifespan)

app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

@app.get("/", response_class=HTMLResponse)
async def read_root(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    connected_clients.append(websocket)
    
    try:
        # –ü—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        garage_state["system_info"] = get_system_info()
        await websocket.send_json(garage_state)
        
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        while True:
            await asyncio.sleep(5)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            garage_state["system_info"] = get_system_info()
            await websocket.send_json(garage_state)
            
    except Exception as e:
        logger.error(f"‚ùå WebSocket –æ—à–∏–±–∫–∞: {e}")
    finally:
        if websocket in connected_clients:
            connected_clients.remove(websocket)

@app.post("/api/control/door")
async def control_door():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–µ—Ä—å—é –≥–∞—Ä–∞–∂–∞"""
    try:
        garage_state["door_open"] = not garage_state["door_open"]
        garage_state["last_update"] = datetime.now().isoformat()
        
        await broadcast_to_clients(garage_state.copy())
        
        return {
            "status": "success", 
            "door_open": garage_state["door_open"],
            "message": f"–î–≤–µ—Ä—å {'–æ—Ç–∫—Ä—ã—Ç–∞' if garage_state['door_open'] else '–∑–∞–∫—Ä—ã—Ç–∞'}"
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–µ—Ä—å—é: {e}")
        return {"status": "error", "message": str(e)}

@app.post("/api/control/light")
async def control_light():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–µ—Ç–æ–º"""
    try:
        garage_state["light_on"] = not garage_state["light_on"]
        garage_state["light_brightness"] = 255 if garage_state["light_on"] else 0
        garage_state["last_update"] = datetime.now().isoformat()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ MQTT
        new_state = "ON" if garage_state["light_on"] else "OFF"
        brightness = 255 if garage_state["light_on"] else 0
        
        mqtt_client.publish(
            "zigbee2mqtt/garage_light_switch/set",
            json.dumps({
                "state": new_state,
                "brightness": brightness
            })
        )
        
        await broadcast_to_clients(garage_state.copy())
        
        return {
            "status": "success",
            "light_on": garage_state["light_on"],
            "brightness": garage_state["light_brightness"],
            "message": f"–°–≤–µ—Ç {'–≤–∫–ª—é—á–µ–Ω' if garage_state['light_on'] else '–≤—ã–∫–ª—é—á–µ–Ω'}"
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–µ—Ç–æ–º: {e}")
        return {"status": "error", "message": str(e)}

@app.post("/api/control/light_brightness")
async def control_light_brightness(brightness: int):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç—å—é —Å–≤–µ—Ç–∞"""
    try:
        if brightness < 0 or brightness > 255:
            return {"status": "error", "message": "–Ø—Ä–∫–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 255"}
            
        garage_state["light_brightness"] = brightness
        garage_state["light_on"] = brightness > 0
        garage_state["last_update"] = datetime.now().isoformat()
        
        mqtt_client.publish(
            "zigbee2mqtt/garage_light_switch/set",
            json.dumps({
                "state": "ON" if brightness > 0 else "OFF",
                "brightness": brightness
            })
        )
        
        await broadcast_to_clients(garage_state.copy())
        
        return {
            "status": "success",
            "brightness": brightness,
            "light_on": brightness > 0
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —è—Ä–∫–æ—Å—Ç—å—é: {e}")
        return {"status": "error", "message": str(e)}

@app.post("/api/simulate/motion")
async def simulate_motion():
    """–°–∏–º—É–ª—è—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è"""
    try:
        garage_state["motion_detected"] = True
        garage_state["last_update"] = datetime.now().isoformat()
        
        await broadcast_to_clients(garage_state.copy())
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        async def reset_motion():
            await asyncio.sleep(10)
            garage_state["motion_detected"] = False
            garage_state["last_update"] = datetime.now().isoformat()
            await broadcast_to_clients(garage_state.copy())
        
        asyncio.create_task(reset_motion())
        
        return {
            "status": "success",
            "motion_detected": True,
            "message": "–î–≤–∏–∂–µ–Ω–∏–µ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–æ"
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è: {e}")
        return {"status": "error", "message": str(e)}

@app.get("/api/status")
async def get_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
    garage_state["system_info"] = get_system_info()
    return garage_state

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=5000, log_level="info")
